
%% This scripts selects the best solution from  a set of pareto solutions . This method is described in https://www.sciencedirect.com/science/article/pii/S2666222121000058
% The pdf file of the paper is placed inside this folder


format long
format loose
clc

clear all

n=2;  % number of objectives, TCO and Emission

%% For NCA battery

% paretoSolutions = [390.0442709	800.3875289;
% 390.8380033	796.7656003;
% 401.8339734	794.8595746
% ];


% paretoSolutions = [272.8997908	525.7107286;
% 272.9014984	525.6933766;
% 273.3030504	525.6416978;
% 273.7681522	525.2631293;
% 274.0315374	517.3271429;
% 274.2204689	516.6010707;
% 274.2576404	514.9441785;
% 276.6157886	514.9212799
% ];


% paretoSolutions = [661.9180899	1104.418646;
% 666.7497296	1100.398844;
% 666.9101969	1100.392251;
% 667.2132812	1097.43373;
% 667.8947604	1087.94813;
% 668.0565088	1087.942456;
% 669.0397911	1075.497415;
% 669.2028207	1075.492662;
% 671.4262183	1075.482967;
% 672.2225571	1075.475939;
% 672.9369578	1075.472842;
% 674.3273175	1075.46776;
% 674.6966299	1075.260736;
% 676.8803702	1075.15951;
% 683.6176408	1071.031993;
% 684.7240667	1071.028578;
% 685.2049607	1071.017478;
% 686.876297	1071.013577;
% 688.6374319	1071.009621;
% 688.7055879	1063.055804;
% 689.8074573	1063.052662;
% 690.292334	1063.042449;
% 691.952289	1063.03886;
% 693.7024652	1063.03522;
% 693.7935349	1055.079616;
% 694.890848	1055.076747
% ];

% paretoSolutions = [450.5918675	1711.840808;
% 450.7097053	1707.925294;
% 451.5241051	1634.081732;
% 451.6659656	1634.050181;
% 452.1959366	1626.461884;
% 452.664274	1626.445507;
% 455.2740934	1609.395548;
% 455.5132854	1609.282525;
% 460.5381988	1606.198355;
% 460.8010058	1606.163882;
% 461.1242887	1606.131274;
% 474.8459176	1605.321336;
% 475.0489387	1605.299628
% ];

%% For NMC battery

% paretoSolutions = [398.4344686	810.270102;
% 408.2512626	803.3752296;
% 410.0360985	803.3752296;
% 419.5560509	802.822203;
% 430.54407	802.2360686;
% 445.0825355	801.6646749;
% 454.8046743	801.6646749
% ];

% paretoSolutions = [276.3853823	552.7075923;
% 276.5541779	548.0195536;
% 277.9518856	547.8002828;
% 279.9032889	538.3940764;
% 283.0551775	538.3414086;
% 298.7276442	534.271633;
% 299.5040235	534.2644575;
% 300.5125807	534.2582003;
% 301.500686	534.0349225;
% 302.2569323	534.0206622;
% 302.2641124	531.8301951;
% 320.080116	529.9832703;
% 321.498341	528.3779743;
% 322.5197453	528.3747252;
% 322.8226083	528.3296555;
% 323.4738781	528.2591116;
% 323.723882	527.5096402;
% 325.2037691	527.4635234;
% 325.7775841	525.5774731
% ];

% paretoSolutions = [665.0351057	1156.033233;
% 665.467113	1156.028036;
% 666.3548026	1155.833508;
% 666.6764777	1155.831753;
% 669.8810893	1155.824421;
% 672.2349387	1154.345293;
% 672.5143821	1152.945787;
% 672.9427576	1152.94096;
% 673.8428492	1152.745917;
% 674.1763442	1152.743767;
% 677.3885222	1152.742256;
% 683.7210084	1123.761654;
% 683.7525553	1117.55869;
% 685.8451932	1117.530217;
% 687.4473179	1107.089173;
% 689.029165	1105.918584;
% 689.2138554	1105.788152;
% 689.3849423	1101.384121;
% 689.4417773	1101.375582;
% 691.8595017	1101.366962;
% 694.3984148	1101.278855;
% 695.2364732	1101.202067;
% 698.474165	1101.185293;
% 702.1300223	1096.285463;
% 705.5565531	1096.270609;
% 714.3088338	1092.150839;
% 714.6105358	1092.144912;
% 718.6769329	1082.281691;
% 718.9826606	1082.276772
% ];

% paretoSolutions = [456.4296278	1680.386135;
% 456.5008005	1658.052809;
% 457.1245594	1658.014185;
% 457.7313863	1649.611543;
% 465.2324362	1649.254851;
% 465.2345694	1644.911141;
% 465.2609613	1643.524561;
% 465.5987309	1637.531942;
% 466.5200463	1637.502443;
% 468.3919066	1637.4708;
% 469.7074738	1637.439564;
% 471.4236693	1630.878772;
% 497.218972	1630.146996;
% 497.2861239	1630.120948;
% 497.6798907	1630.119562
% ];

% Data for LFP battery

% paretoSolutions = [402.2933405	823.7746037;
% 414.8780744	821.3548937;
% 415.2974151	820.4411147;
% 417.9979921	820.2125021;
% 422.8236662	819.1935341
% ];

% paretoSolutions = [287.2343844	549.5780756;
% 288.010807	549.5617012;
% 289.288352	549.5551278;
% 290.8230989	549.5362197;
% 322.0573843	548.8317313;
% 323.4217909	547.2373741;
% 324.3473914	542.7941774;
% 325.0494272	542.7708568;
% 325.9888042	542.7531495;
% 327.3368773	542.6698812;
% 330.6321497	542.5575006;
% 340.3623126	540.4320726;
% 343.2537632	539.3424776;
% 343.9549271	538.1618388;
% 345.8051268	535.5448089;
% 348.7457023	534.6654838
% ];

% paretoSolutions = [693.1364817	1182.039431;
% 693.5148234	1181.064484;
% 694.681588	1180.851322;
% 697.2370995	1180.815295;
% 697.320804	1179.792452;
% 698.0736789	1177.632584;
% 700.9873304	1177.494385;
% 701.6075329	1167.830386;
% 701.6141119	1143.279233;
% 701.768236	1137.168593;
% 704.9066097	1136.728393;
% 705.393058	1130.986713;
% 723.5393138	1127.33929;
% 725.0890684	1127.209038;
% 727.0944281	1127.188295;
% 731.7225313	1127.163016;
% 737.5835375	1127.147977
% ];

% paretoSolutions = [469.1841234	1718.752489;
% 469.2837998	1709.086251;
% 470.0997759	1709.067074;
% 470.2161716	1698.537353;
% 470.519487	1697.498104;
% 471.8952047	1697.400012;
% 471.9806823	1691.34915;
% 473.755869	1689.422085;
% 474.1272052	1688.914114;
% 474.5985273	1687.105263;
% 475.9532432	1687.042283;
% 476.3877726	1683.749575;
% 477.3169305	1683.609153;
% 479.4420971	1676.462653;
% 479.8698129	1675.698671;
% 481.9736691	1675.579116;
% 486.0519732	1675.394057;
% 492.5512892	1675.184821;
% 497.1185566	1675.054819
% ];

%% Olaf

% paretoSolutions = [437.7193332	810.270102;
% 469.8872033	808.1072341;
% 471.4776339	807.2081935
% ];

% paretoSolutions = [318.3499318	552.8338508;
% 318.5018575	552.7012514;
% 318.5623138	552.6983815;
% 318.9876991	552.6958293;
% 319.2277983	541.0603214;
% 319.2983323	541.0593245;
% 319.8640243	541.0582697;
% 320.571239	541.0573418;
% 321.385682	541.0564039;
% 321.7959288	541.0117827;
% 322.3321176	540.9612537;
% 322.4897711	540.9595035;
% 322.6620848	537.1024301;
% 323.8271651	526.9676905;
% 323.9972247	526.9585031;
% 326.6397644	526.9318765;
% 327.2209891	526.8964361
% ];


% paretoSolutions = [727.4936106	1242.323204;
% 727.695394	1112.342541;
% 729.9864575	1109.067598;
% 730.6997154	1099.041691;
% 731.5755692	1097.495924;
% 733.1646808	1085.92425;
% 735.1363312	1085.920916;
% 736.3958875	1085.911583;
% 739.0302806	1079.63055;
% 741.6026309	1078.843962;
% 743.4477211	1078.769502;
% 744.0205737	1078.325592;
% 744.723733	1073.73392;
% 748.5701823	1070.733271;
% 749.9355191	1070.72893;
% 750.4171854	1067.837291;
% 753.6926434	1062.69704;
% 755.0555128	1062.693075;
% 756.1106379	1061.940662
% ];

paretoSolutions = [505.6032248	1702.134865;
505.7051242	1687.099587;
506.0157127	1687.077016;
506.2511361	1684.86378;
506.384682	1684.841194;
506.8280383	1669.508715;
508.0668206	1669.479084;
508.7310204	1669.450003;
509.6128033	1669.421452;
509.6953285	1667.095301;
509.8163999	1665.046204;
510.466974	1655.83536;
512.215164	1652.211886;
513.0493863	1652.189888;
513.2865067	1647.910539;
513.8878625	1644.790404;
514.7605052	1644.784634;
515.3751529	1644.061872;
515.5999775	1641.879842;
515.9124083	1640.387766;
516.165077	1637.623609
];



[r,~]= size(paretoSolutions);

N=n;

c=N;

n=1;

k=1;

i=1;

fprintf('Please enter data for rank of %d Alternative\n',i);
data = paretoSolutions;


%% generation of weight and assignment to rank given by the user %%

n=1;

k=1;

i=1;

j=1;

ss=max(max(data));

while (n<=max(N,r))

 

for j=1:n

	a(j,k)=1/j;

end

b(1,k)=a(1,k);

i=2;

while(i<=n)

b(i,k)= b((i-1),k)+a(i,k);

i=i+1;

end

for i=1:n

   c(i,k) =1/(b(i,k));

end

s(1,k)=0;

for i=1:n

	

s(1,k)=s(1,k)+(c(i,k));

end

for i=1:n

   w(i,k)=c(i,k)/s(1,k);

end

n=n+1;

k=k+1;

end

disp(w(:,N));

 

for jj=1:N

for j=1:max(N,r)

	aa=0;

	for i=1:r

    	if j==data(i,jj)

       	aa=aa+1;

    	end

	end

	if aa==1

    	

    	p=find(data(1:r,jj)==j);

    	data(p,jj)=w(j,ss);

	end

	if aa>1

    	tt=aa;  % total repetition of rank

    	aa=aa/2;

	aa=aa-0.5;

	kk=j-aa;

	data(1:r,jj);

	p=find(data(1:r,jj)==j);

 

	ww=sum(w(kk:j+aa,ss))/tt;

	pp=1;

	while (kk<=j+aa && kk>=0)

    	

    	data(p(pp,1),jj)=ww;

    	pp=pp+1;

    	kk=kk+1;

	end

	end

	j=j+1;

end

jj=jj+1;

end

 

 

for jj=1:N

for j=0.5:max(N,r)

	aa=0;

	for i=1:r

    	if j==data(i,jj)

       	aa=aa+1;

    	end

	end

	if aa==1

    	

    	p=find(data(1:r,jj)==j);

    	data(p,jj)=w(j,ss);

	end

	if aa>1

    	tt=aa;  % total repetition of rank

    	aa=aa/2;

	aa=aa-0.5;

	kk=j-aa;

	data(1:r,jj);

	p=find(data(1:r,jj)==j);

 

	ww=sum(w(kk:j+aa,ss))/tt;

	pp=1;

	while (kk<=j+aa && kk>=0)

    	

    	data(p(pp,1),jj)=ww;

    	pp=pp+1;

    	kk=kk+1;

	end

	end

	j=j+1;

end

jj=jj+1;

end

 

rw=rand(1,N);

for j=1:N

	fprintf('Please enter %d objectives rank\n',j);

	rr(1,j)=input('Rank =');

	%rw(1,j)=w(rr,N);

end

for i=1:N

	aa=0;

	for j=1:N

    	if i==rr(1,j)

       	aa=aa+1;

    	end

	end

	if aa==1

    	

    	p=find(rr==i);

    	rw(1,p)=w(i,N);

	end

	if aa>1

    	tt=aa;  % total repetition of rank

    	aa=aa/2;

	aa=aa-0.5;

	kk=i-aa;

	p=find(rr==i);

  

	ww=sum(w(kk:i+aa,N))/tt;

	pp=1;

	while (kk<=i+aa && kk>=0)

    	

    	rw(1,p(1,pp))=ww;

    	pp=pp+1;

    	kk=kk+1;

	end

	end

	i=i+1;

end

 

j=1;

 

for i=0.5:N

	aa=0;

	for j=1:N

    	if i==rr(1,j)

       	aa=aa+1;

    	end

	end

	if aa==1

    	p=find(rr==i);

    	rw(1,p)=w(i,N);

	end

	if aa>1

    	tt=aa; % total repetition of rank

    	aa=aa/2;

	aa=aa-0.5;

	kk=i-aa;

	p=find(rr==i);

 

	ww=sum(w(kk:i+aa,N))/tt;

	pp=1;

	while (kk<=i+aa && kk>=0)

    	

        rw(1,p(1,pp))=ww;

    	pp=pp+1;

    	kk=kk+1;

	end

	end

	i=i+1;

end

c=N;

i=1;

j=1;

 

%% generation of Composite score %%



Compositescores=data*rw';

X=Compositescores;

[~,ii]=sort(X,'Descend');

[~,rank]=sort(ii);